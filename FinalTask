using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Events;

public class EnemyCounter : MonoBehaviour
{
    [SerializeField] private Spawner _enemySpawner;
    [SerializeField] private int _needToUpgradeEnemy;

    private int _enemySpawned = 0;

    private void OnEnable()
    {
        _enemySpawner.isSpawned += IncreaseCounter;
    }

    private void OnDisable()
    {
        _enemySpawner.isSpawned -= IncreaseCounter;
    }

    private void Update()
    {
        EnemyLevelUp();
    }

    private void IncreaseCounter()
    {
        _enemySpawned++;
    }

    private void EnemyLevelUp()
    {
        if (_enemySpawned >= _needToUpgradeEnemy)
        {
            _enemySpawner.LevelUp();
            _enemySpawned = 0;
            _needToUpgradeEnemy += _needToUpgradeEnemy;
        }
    }
}

public class EnemyMover : MonoBehaviour
{
    [SerializeField] private float _speed;

    private Player _player;

    private void OnEnable()
    {
        _player = FindObjectOfType<Player>();
        LookAtPlayer();
    }

    private void Update()
    {
        Move();
    }

    public void LevelUp(float speed)
    {
        _speed += speed;
    }

    private void LookAtPlayer()
    {
        var direction = transform.position - _player.transform.position;
        var angle = Mathf.Atan2(direction.y, direction.x) * Mathf.Rad2Deg;
        transform.rotation = Quaternion.Euler(0, 0, angle);
    }

    private void Move()
    {
        transform.position = Vector3.MoveTowards(transform.position, _player.transform.position, _speed * Time.deltaTime);
    }
}

public class Spawner : Pool
{
    [SerializeField] private GameObject _enemy;
    [SerializeField] private float _timeBtwSpawn;
    [SerializeField] private float _spawnDelay;

    public event UnityAction isSpawned;

    private int _numObjects = 1;
    private float _radius = 9f;

    private void Start()
    {
        Initialize(_enemy);
    }

    private void Update()
    {
        if (_spawnDelay > 0)
            _spawnDelay -= Time.deltaTime;

        if (_spawnDelay <= 0)
        {
            for(int i=0; i< _numObjects; i++)
            {
                if (TryGetObject(out GameObject enemy))
                {
                    Spawn(enemy);
                    isSpawned?.Invoke();
                    _spawnDelay = _timeBtwSpawn;
                }
            }          
        }
    }

    private void Spawn(GameObject enemy)
    {
        Vector3 center = transform.position;
        Vector3 position = RandomCircle(center, _radius);
        enemy.transform.position = position;
        enemy.SetActive(true);
    }

    private Vector3 RandomCircle(Vector3 center, float radius)
    {
        float angle = Random.value * 360;
        Vector3 position;
        position.x = center.x + radius * Mathf.Sin(angle * Mathf.Deg2Rad);
        position.y = center.y + radius * Mathf.Cos(angle * Mathf.Deg2Rad);
        position.z = center.z;
        return position;
    }
}

public class Enemy : MonoBehaviour
{
    [SerializeField] private float _damage;
    [SerializeField] private float _health;

    public event UnityAction isInactive;

    private float _currentHealth;

    private void OnEnable()
    {
        _currentHealth = _health;
    }

    private void Update()
    {
        if (_currentHealth <= 0)
        {
            gameObject.SetActive(false);
            isInactive?.Invoke();
            _currentHealth = _health;
        }
    }

    public void TakeDamage(float damage)
    {
        _currentHealth -= damage;
    }  

    public void LevelUp(float damage, float health)
    {
        _damage += damage;
        _health += health;
    }
}

[RequireComponent(typeof(Rigidbody2D))]

public class Bullet : MonoBehaviour
{
    [SerializeField] private float _speed;
    [SerializeField] private float _damage;

    private Player _player;
    private Rigidbody2D _rigidBody;

    private void OnEnable()
    {
        _rigidBody = GetComponent<Rigidbody2D>();
        _player = FindObjectOfType<Player>();
    }

    private void OnTriggerEnter2D(Collider2D collision)
    {
        if (collision.TryGetComponent(out Enemy enemy))
        {
            enemy.TakeDamage(_damage);
            gameObject.SetActive(false);
        }
    }

    private void OnBecameInvisible()
    {
        gameObject.SetActive(false);
    }

    public void SetTarget(Enemy target)
    {
        _rigidBody.velocity = target.transform.position.normalized * _speed;
    }
}

[RequireComponent(typeof(CircleCollider2D))]

public class Player : Pool
{
    [SerializeField] private List<Enemy> _enemies = new();
    [SerializeField] private GameObject _bullet;
    [SerializeField] private float _maxHealth;
    [SerializeField] private float _currentHealth;
    [SerializeField] private float _shootDelay;
    [SerializeField] private float _timeBtwShoot;

    private Enemy targetEnemy;
    private CircleCollider2D _collider;

    private void Start()
    {
        _collider = GetComponent<CircleCollider2D>();
        Initialize(_bullet);
    }

    private void OnTriggerEnter2D(Collider2D collision)
    {
        if (collision.TryGetComponent(out Enemy enemy))
        {
            _enemies.Add(enemy);
        }
    }

    private void OnTriggerExit2D(Collider2D collision)
    {
        if (collision.TryGetComponent(out Enemy enemy))
        {
            _enemies.Remove(enemy);
        }
    }

    private void Update()
    {
        if (_shootDelay > 0)
            _shootDelay -= Time.deltaTime;

        if (_enemies.Count > 0)
        {
            targetEnemy = GetTarget();

            if (_shootDelay <= 0 && targetEnemy != null)
            {
                if (TryGetObject(out GameObject bullet))
                {
                    Shoot(targetEnemy, bullet, transform.position);
                    _shootDelay = _timeBtwShoot;
                }
            }
        }
    }

    public void Shoot(Enemy target, GameObject bullet, Vector3 position)
    {
        bullet.SetActive(true);
        bullet.transform.position = position;

        if (bullet.TryGetComponent(out Bullet projectile))
            projectile.SetTarget(target);
    }

    private Enemy GetTarget()
    {
        float distance;
        float minDistance = _collider.radius;
        Enemy nearestEnemy = null;

        foreach (Enemy enemy in _enemies)
        {
            distance = Vector3.Distance(transform.position, enemy.transform.position);

            if (distance < minDistance)
            {
                minDistance = distance;
                nearestEnemy = enemy;
            }
        }

        return nearestEnemy;
    }
}
