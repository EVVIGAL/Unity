using System.Collections;
using UnityEngine;
using UnityEngine.UI;

public class Health : MonoBehaviour
{
    private float _maxValue = 100f;
    private float _minValue = 0f;
    private float _currentValue;
    private float _valueToChangeHealth = 10f;

    public float MaxValue => _maxValue;

    public event UnityAction<float> HealthChanged;

    private void Start()
    {
        _currentValue = 95f;
    }

    public void Heal()
    {
        if (_currentValue <= _maxValue)
        {
            _currentValue = Mathf.Clamp(_currentValue += _valueToChangeHealth, _minValue, _maxValue);
            HealthChanged?.Invoke(_currentValue);
        }
    }

    public void TakeDamage()
    {
        if (_currentValue > _minValue)
        {
            _currentValue = Mathf.Clamp(_currentValue -= _valueToChangeHealth, _minValue, _maxValue);
            HealthChanged?.Invoke(_currentValue);
        }
    }
}

[RequireComponent(typeof(Scrollbar))]

public class DisplayHealth : MonoBehaviour
{
    [SerializeField] private Health _health;

    private Scrollbar _scrollbar;
    private Coroutine _valueController;
    private float _scrollSpeed = 0.4f;

    private void Start()
    {
        _scrollbar = GetComponent<Scrollbar>();
        _health.HealthChanged += RestartCoroutine;
    }

    private void OnDisable()
    {
        _health.HealthChanged -= RestartCoroutine;
    }

    private IEnumerator ChangeValue(float target)
    {
        target /= _health.MaxValue;

        while (_scrollbar.size >= 0 && _scrollbar.size <= 1)
        {
            _scrollbar.size = Mathf.MoveTowards(_scrollbar.size, target, _scrollSpeed * Time.deltaTime);
            yield return null;
        }
    }

    private void RestartCoroutine(float target)
    {
        if (_valueController != null)
            StopCoroutine(_valueController);

        _valueController = StartCoroutine(ChangeValue(target));
    }
}
