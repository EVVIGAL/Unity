using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Events;

[RequireComponent(typeof(Rigidbody2D))]
[RequireComponent(typeof(Animator))]

public class Player : MonoBehaviour
{
    [SerializeField] private float _speed;
    [SerializeField] private float _jumpForce;

    private const string _animationParameterSpeed = "Speed";
    private const string _animationParameterOnGround = "onGround";
    private GroundChecker _groundChecker;
    private Animator _animator;
    private Rigidbody2D _rigidBody;
    private Vector2 _direction;
    private bool _faceToRight = true;
    private bool _onGround;

    public event UnityAction<bool> PickedUp;

    private void Start()
    {
        _animator = GetComponent<Animator>();
        _rigidBody = GetComponent<Rigidbody2D>();
        _groundChecker = GetComponentInChildren<GroundChecker>();
        _groundChecker.Grounded += SpecifyOnGroundState;
    }

    private void OnCollisionEnter2D(Collision2D collision)
    {
        if (collision.gameObject.TryGetComponent(out Enemy enemy))
            Destroy(gameObject);
    }

    private void OnTriggerEnter2D(Collider2D collision)
    {
        if (collision.TryGetComponent(out Berry berry))
            PickedUp?.Invoke(true);
    }

    private void Update()
    {
        Move();
        Reflect();
        Jump();
    }

    private void OnDisable()
    {
        _groundChecker.Grounded -= SpecifyOnGroundState;
    }

    private void Jump()
    {
        if (Input.GetKeyDown(KeyCode.Space) && _onGround)
        {
            _rigidBody.AddForce(Vector2.up * _jumpForce);
        }
    }

    private void Move()
    {
        _direction.x = Input.GetAxis("Horizontal");
        _animator.SetFloat(_animationParameterSpeed, Mathf.Abs(_direction.x));
        _rigidBody.velocity = new Vector2(_direction.x * _speed, _rigidBody.velocity.y);
    }

    private void Reflect()
    {
        if ((_direction.x > 0 && !_faceToRight) || (_direction.x < 0 && _faceToRight))
        {
            transform.localScale *= new Vector2(-1, 1);
            _faceToRight = !_faceToRight;
        }
    }

    private void SpecifyOnGroundState(bool onGround)
    {
        _onGround = onGround;
        _animator.SetBool(_animationParameterOnGround, onGround);
    }
}

public class GroundChecker : MonoBehaviour
{
    public event UnityAction<bool> Grounded;

    private void OnTriggerEnter2D(Collider2D collision)
    {
        if (collision.TryGetComponent(out Tile tile))
        {
            Grounded?.Invoke(true);
        }
    }

    private void OnTriggerExit2D(Collider2D collision)
    {
        if (collision.TryGetComponent(out Tile tile))
        {
            Grounded?.Invoke(false);
        }
    }
}

public class Enemy : MonoBehaviour
{
    [SerializeField] private Transform _path;
    [SerializeField] private float _waitingTime;
    [SerializeField] private float _speed;

    private Transform[] _points;
    private Vector3 _target;
    private Coroutine _mover;
    private int _currentPoint;

    private void Start()
    {
        _points = new Transform[_path.childCount];

        for (int i = 0; i < _points.Length; i++)
            _points[i] = _path.GetChild(i);

        _mover = StartCoroutine(MoveToTarget());
    }

    private void Update()
    {
        _target = _points[_currentPoint].position;

        if (transform.position == _target)
        {
            _currentPoint++;

            if (_currentPoint >= _points.Length)
                _currentPoint = 0;

            RestartCoroutine();
        }
    }

    private IEnumerator MoveToTarget()
    {
        var wait = new WaitForSeconds(_waitingTime);

        yield return wait;

        while (transform.position != _target)
        {
            transform.position = Vector3.MoveTowards(transform.position, _target, _speed * Time.deltaTime);
            yield return null;
        }
    }

    private void RestartCoroutine()
    {
        if (_mover != null)
            StopCoroutine(_mover);

        _mover = StartCoroutine(MoveToTarget());
    }
}

public class RandomPointSpawner : MonoBehaviour
{
    [SerializeField] private BerrySpawner[] _spawners;
    [SerializeField] private Player _player;

    private bool _HasBerry;

    private void Start()
    {
        _HasBerry = false;
        _player.PickedUp += RemoveBerry;
    }

    private void Update()
    {
        if (!_HasBerry)
        {
            int _randomIndex = Random.Range(0, _spawners.Length);
            _spawners[_randomIndex].SpawnBerry();
            _HasBerry = true;
        }
    }

    private void OnDisable()
    {
        _player.PickedUp -= RemoveBerry;
    }

    private void RemoveBerry(bool hasBerry)
    {
        _HasBerry = !hasBerry;
    }
}

public class BerrySpawner : MonoBehaviour
{
    [SerializeField] private Berry _berry;

    public void SpawnBerry()
    {
        Instantiate(_berry, transform.position, Quaternion.identity);
    }
}

public class Berry : MonoBehaviour
{
    private void OnTriggerEnter2D(Collider2D collision)
    {
        if (collision.TryGetComponent(out Player player))
        {
            Destroy(gameObject);
        }
    }
}

public class Tile : MonoBehaviour
{

}
